# import asyncio
# from aiogram import types
# from aiogram.dispatcher.middlewares.base import BaseMiddleware
# from aiogram.types import Update
# from datetime import datetime, timedelta

# class AntiSpamMiddleware(BaseMiddleware):
#     def __init__(self):
#         super().__init__()
#         self.user_messages = {}

#     async def __call__(self, handler, event: Update, data: dict):
#         if isinstance(event, types.Message):
#             user_id = event.from_user.id
#             message_text = event.text
#             now = datetime.now()

#             if user_id not in self.user_messages:
#                 self.user_messages[user_id] = []

#             # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
#             self.user_messages[user_id] = [
#                 (msg, timestamp) for msg, timestamp in self.user_messages[user_id]
#                 if now - timestamp < timedelta(seconds=5)
#             ]

#             # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#             self.user_messages[user_id].append((message_text, now))

#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º
#             messages_count = len([msg for msg, timestamp in self.user_messages[user_id] if msg == message_text])

#             if messages_count >= 2:
#                 await event.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Å–ø–∞–º –Ω–∞ 5 —Å–µ–∫—É–Ω–¥. üò°")
#                 await asyncio.sleep(5)
#                 self.user_messages[user_id] = []
#                 return

#         await handler(event, data)

from aiogram import BaseMiddleware
from aiogram.types import Message
from collections import defaultdict
import time

class AntiSpamMiddleware(BaseMiddleware):
    def __init__(self):
        super().__init__()
        # –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Ä–µ–º–µ–Ω–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self.user_data = defaultdict(lambda: {"last_message": None, "timestamp": 0, "blocked_until": 0})
    
    async def __call__(self, handler, event: Message, data: dict):
        user_id = event.from_user.id
        current_time = time.time()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_data = self.user_data[user_id]
        last_message = user_data["last_message"]
        last_timestamp = user_data["timestamp"]
        blocked_until = user_data["blocked_until"]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if current_time < blocked_until:
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—ã
        if last_message == event.text and current_time - last_timestamp < 1:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
            self.user_data[user_id]["blocked_until"] = current_time + 5
            await event.answer("<b>–ê–Ω—Ç–∏-—Å–ø–∞–º:</b> –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 —Å–µ–∫—É–Ω–¥. üò°",
                               parse_mode='HTML')
            return
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        self.user_data[user_id] = {"last_message": event.text, "timestamp": current_time, "blocked_until": blocked_until}
        
        # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        return await handler(event, data)