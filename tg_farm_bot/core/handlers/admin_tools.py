import time
from aiogram import Bot
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram import exceptions
from core.keyboards.inline import show_inline_cansel
from core.utils.statesform import Input_text
from database.db import get_len_users, get_users_id, get_all_users_for_txt


async def show_users(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —é–∑–µ—Ä–æ–≤(—Å—á–µ—Ç –∏–∑ –±–¥)"""
    await call.message.answer(f'–í—Å–µ–≥–æ —é–∑–µ—Ä–æ–≤: üßë‚Äçüíª<b>{get_len_users()}</b>',
                              parse_mode='HTML')
    await call.answer()

async def get_all_users(call: CallbackQuery, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç txt –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤"""
    get_all_users_for_txt()
    chat_id = call.message.chat.id
    document = FSInputFile('files/users.txt')
    await bot.send_document(chat_id, document)
    await call.answer()

async def give_text_from_message(call: CallbackQuery, state: FSMContext):
    """–¢—Ä–µ–±—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º —é–∑–µ—Ä–∞–º(–ø—Ä–æ–∫–ª–∞–¥–∫–∞)"""
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —é–∑–µ—Ä–∞–º!',
                              reply_markup=show_inline_cansel)
    await call.answer()
    await state.set_state(Input_text.text)


async def give_text_for_user(call: CallbackQuery, state: FSMContext):
    """–¢—Ä–µ–±—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–º—É —é–∑–µ—Ä—É(–ø—Ä–æ–∫–ª–∞–¥–∫–∞)"""
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ user_id –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!',
                              reply_markup=show_inline_cansel)
    await call.answer()
    await state.set_state(Input_text.text_from_user)


async def send_message_all_users(message: Message, state: FSMContext, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —é–∑–µ—Ä–∞–º"""
    await state.update_data(text=message.text)
    data = await state.get_data()
    users = get_users_id()
    receive_users = 0
    block_users = 0
    for user in users:
        try:
            await bot.send_message(chat_id=user ,text=data['text'])
            receive_users += 1
            time.sleep(0.4)
        except exceptions.TelegramForbiddenError:
            block_users += 1
        except exceptions.TelegramRetryAfter:
            time.sleep(10)
    await message.answer(f'‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —é–∑–µ—Ä–∞–º: <b>{receive_users}</b>\n‚ö†Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: <b>{block_users}</b>',
                         parse_mode='HTML')
    await state.clear()


async def send_message_user(message: Message, state: FSMContext, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–æ–º—É —é–∑–µ—Ä—É"""
    mess = (message.text).split(' ')
    try:
        await bot.send_message(chat_id=mess[0], text=(' ').join(mess[1:]))
        await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    except exceptions.TelegramForbiddenError:
        await message.answer('–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ(–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)')
    await state.clear()


async def cancel_input_for_message(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–í–´ –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ')