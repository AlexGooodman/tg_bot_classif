import re, os, string
from typing import Union
from aiogram import Bot
from aiogram.types import Message
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from database.db import get_all_titles_from_data, get_title_from_data, get_path_to_file
from database.db import save_line_for_user_favourites, delete_line_from_bd, delete_all_user_line_from_bd
from database.db import get_user_favourites_in_bd, show_choice_classif, get_path_to_many_files, get_path_to_many_random_files
from database.db import show_choice_random_classif
from core.utils.statesform import Users_steps
from core.keyboards.reply import reply_keyboard_start, reply_keyboards
from core.keyboards.reply import reply_keyboard_actions_for_favourites
from core.keyboards.reply import reply_keyboards_choice
from core.keyboards.inline import show_value_for_key, show_value_for_key_in_favourites
from core.parser_logic.finaly_dict import create_dict, randomize_keys


# *******************************************************************************************************************
# –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# *******************************************************************************************************************

def show_key_from_dict(dictionary: dict, counter: int) -> Union[str, bool]:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∏ –≤–æ–∑–≤—Ä–∞—â–µ—Ç –∫–ª—é—á"""
    if len(list(dictionary.keys())) > counter:
        keys_list = list(dictionary.keys())
        key = keys_list[counter]
        return key
    else:    
        return False


def show_value_from_dict(dictionary: dict, message_text: str) -> Union[str, bool]:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∏ –≤–æ–∑–≤—Ä–∞—â–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–ª—é—á–∞"""
    value = dictionary[f' {message_text}']
    return value


def couner_add(counter: int) -> int:
    """–ü–æ–≤—ã—à–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É —Å–ª–æ–≤–∞—Ä—è)"""
    counter += 1
    return counter

def couner_step_down(counter: int) -> int:
    """–ü–æ–≤—ã—à–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É —Å–ª–æ–≤–∞—Ä—è)"""
    counter -= 1
    return counter

def delete_from_dict(dictionary: dict, key: str) -> dict:
    """–£–¥–∞–ª—è–µ—Ç –ª–∏–Ω–∏—é –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
    dictionary.pop(key)
    return dictionary

def get_dict_classifications(file):
    """–ü–∞—Ä—Å–∏—Ç –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç —Å–ø–∞—Ä—à–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    data_classif = create_dict(file)
    return data_classif

def get_dict_many_classif(file):
    """–ü–∞—Ä—Å–∏—Ç –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç —Å–ø–∞—Ä—à–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π"""
    with open("database/storage/result.txt", "w", encoding="utf-8") as outfile:
        for f in file:
            with open(f, "r", encoding="utf-8") as infile:
                outfile.write('\n')
                outfile.write(infile.read())
    data_classif = create_dict("database/storage/result.txt")
    os.remove("database/storage/result.txt")

    return data_classif

def join_many_dictionary(firs_dict: dict, second_dict: dict) -> dict:
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–∞ —Å–ª–æ–≤–∞—Ä—è"""
    x = second_dict.copy()
    x.update(firs_dict)
    return x



# *******************************************************************************************************************
# –§—É–Ω–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
# *******************************************************************************************************************

async def start_classif_from_bd(message: Message):
    """–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ–≥–æ –∫–µ–π–±–æ—Ä–¥–∞"""
    await message.reply('–ì–æ—Ç–æ–≤—ã?',
                        reply_markup=reply_keyboards_choice)

async def add_classif_message(message: Message, state: FSMContext):
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —É–∫–∞–∑–∞–≤ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –∏–ª–∏ —á–∏—Å–ª–æ</b>',
                         parse_mode='HTML')
    await state.set_state(Users_steps.add_choice)

async def add_classif(message: Message, state: FSMContext):
    """–ü–æ–¥–≥—Ä—É–∂–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é"""
    if (message.text).isdigit() is False:
        await message.answer('–≠—Ç–æ –Ω–µ —Ü–∏—Ñ—Ä–∞ –∏ –Ω–µ —á–∏—Å–ª–æ!')
    elif get_path_to_file(message.text) is False: 
        await message.answer('–¢–∞–∫–æ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑ üò§')
    else:
        await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: <b>{get_title_from_data(message.text)}</b>',
                             parse_mode='HTML')
        await state.update_data(add_choice=get_path_to_file(message.text))
        data = await state.get_data()
        await state.set_state(Users_steps.user_classif)
        await upload_next_file_classif(data['add_choice'], state, message)


async def upload_next_file_classif(path_for_classif: str, state: FSMContext, message: Message):
    """–ü–∞—Ä—Å–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â—É—é"""
    try:
        await start_classif_from_bd(message)
        await state.set_state(Users_steps.user_classif)
        data = await state.get_data()
        current_dict = data['user_classif']
        new_dict = get_dict_classifications(path_for_classif)
        await state.update_data(user_classif=randomize_keys(join_many_dictionary(current_dict, new_dict)))
        await state.set_state(Users_steps.user_count)
        await state.update_data(user_count=0)
    except KeyError:
        await message.answer('–û—à–∏–±–∫–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –ª–æ–±–±–∏.',
                             reply_markup=reply_keyboards)
        

async def show_all_titles_from_bd(message: Message, state: FSMContext):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    await message.answer(f'<b>–í–æ—Ç —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å:</b>\n{get_all_titles_from_data()}',
                         parse_mode='HTML')
    await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —É–∫–∞–∑–∞–≤ —Ü–∏—Ñ—Ä—É</b>\n(–ü—Ä–∏–º–µ—Ä: "1" –∏–ª–∏ "1-5" –∏–ª–∏ "1,2,3").',
                         parse_mode='HTML')
    await state.set_state(Users_steps.choice)


async def choice_title_from_bd(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–±–æ—Ä —é–∑–µ—Ä–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–µ–π 'upload_file_classif'"""
    if re.match(r'\d+-\d+', message.text):
        numb1 = str(re.findall(r'\d+(?=-)', message.text)[0])
        numb2 = str(re.findall(r'(?<=-)\d+', message.text)[0])
        if get_path_to_many_files(numb1, numb2) is not False:
            await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—ã: <b>{show_choice_classif(numb1, numb2)}</b>',
                             parse_mode='HTML')
            await state.update_data(choice=get_path_to_many_files(numb1, numb2))
            data = await state.get_data()
            await state.set_state(Users_steps.user_classif)
            await upload_many_files_classif(data['choice'], state, message)
        else:
            await message.answer('–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑. üò§')
    elif re.match(r'\d+(,\d+)*', message.text):
        numbs = (message.text).strip(string.punctuation)
        if get_path_to_many_random_files(numbs) is not False:
            await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—ã: <b>{show_choice_random_classif(numbs)}</b>',
                                 parse_mode='HTML')
            await state.update_data(choice=get_path_to_many_random_files(numbs))
            data = await state.get_data()
            await state.set_state(Users_steps.user_classif)
            await upload_many_files_classif(data['choice'], state, message)
        else:
            await message.answer('–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑. üò§') 
    elif (message.text).isdigit() is False:
        if get_path_to_file(message.text) is False:
            await message.answer('–¢–∞–∫–æ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑ üò§')
        else:
            await message.answer('–≠—Ç–æ –Ω–µ —Ü–∏—Ñ—Ä–∞ –∏ –¥–∞–∂–µ –Ω–µ —á–∏—Å–ª–æ!')
    else: 
        await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: <b>{get_title_from_data(message.text)}</b>',
                             parse_mode='HTML')
        await state.update_data(choice=get_path_to_file(message.text))
        data = await state.get_data()
        await state.set_state(Users_steps.user_classif)
        await upload_file_classif(data['choice'], state, message)


async def upload_file_classif(path_for_classif: str, state: FSMContext, message: Message):
    """–ü–∞—Ä—Å–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é, –¥–∞–µ—Ç —Å—Ç–∞—Ä—Ç –µ—ë –Ω–∞—á–∞–ª—É"""
    await start_classif_from_bd(message)
    await state.set_state(Users_steps.user_classif)
    await state.update_data(user_classif=get_dict_classifications(path_for_classif))
    await state.set_state(Users_steps.user_count)
    await state.update_data(user_count=0)

async def upload_many_files_classif(path_for_classif: list, state: FSMContext, message: Message):
    """–ü–∞—Ä—Å–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –¥–∞–µ—Ç —Å—Ç–∞—Ä—Ç –µ—ë –Ω–∞—á–∞–ª—É"""
    await start_classif_from_bd(message)
    await state.set_state(Users_steps.user_classif)
    await state.update_data(user_classif=get_dict_many_classif(path_for_classif))
    await state.set_state(Users_steps.user_count)
    await state.update_data(user_count=0)




# *******************************************************************************************************************
# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
# *******************************************************************************************************************

async def start_classifications(message: Message):
    """–í—ã–≤–æ–¥–∏—Ç –∫–Ω–æ–ø–∫—É(–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –∑–≤–µ–Ω–æ –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏ save_user_classif –∏ give_key_from_classif)"""
    await message.reply('–ì–æ—Ç–æ–≤—ã?',
                        reply_markup=reply_keyboard_start)


async def save_user_classif(message: Message,state: FSMContext, bot: Bot):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —é–∑–µ—Ä—É"""
    # await state.clear()
    file = await bot.get_file(message.document.file_id)
    await bot.download_file(file.file_path, 'downloaded.txt')
    await start_classifications(message)
    await state.set_state(Users_steps.user_classif)
    await state.update_data(user_classif=get_dict_classifications('downloaded.txt'))
    await state.set_state(Users_steps.user_count)
    await state.update_data(user_count=0)

    

async def give_key_from_classif(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∫–ª—é—á –∏–∑ —Å–ª–æ–≤–∞—Ä—è, –≤—ã–≤–æ–¥–∏—Ç –Ω–æ–≤—ã–π –∫–µ–π–±–æ—Ä–¥"""
    try:
        data = await state.get_data()
        if data['user_classif'] is False:
            await message.answer('<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ ":" –∏–ª–∏ —Ç–∞–±—É–ª—è—Ü–∏–π üßê</b>',
                                parse_mode='HTML',
                                reply_markup=reply_keyboards)
        elif data['user_classif'] == None:
            await message.answer('<b>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–æ–º(.txt) üò§</b>',
                                parse_mode='HTML',
                                reply_markup=reply_keyboards)
        else:
            if show_key_from_dict(data['user_classif'], data['user_count']) is False:
                await message.answer('<b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏! ‚úÖ</b>',
                                    parse_mode='HTML')
            else:
                await message.answer('üëÅ - –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞;\n‚≠êÔ∏è - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ')
                await message.answer(show_key_from_dict(data['user_classif'], data['user_count']),
                                    reply_markup=show_value_for_key)
                await state.set_state(Users_steps.user_classif)
    except KeyError:
        await message.answer('–¢—É—Ç –ø—É—Å—Ç–æ ü§∑‚Äç‚ôÇÔ∏è',
                             reply_markup=reply_keyboards)

async def give_next_key_from_classif(message: Message, state: FSMContext):
    """
    –í—ã–≤–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 
    KeyError –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    """
    try:
        data = await state.get_data()
        await state.update_data(user_count=couner_add(data['user_count']))
        data = await state.get_data()
        if show_key_from_dict(data['user_classif'], data['user_count']) is False:
            await message.answer('<b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏! ‚úÖ</b>',
                                 parse_mode='HTML')
        else:
            await message.answer(show_key_from_dict(data['user_classif'], data['user_count']),
                                reply_markup=show_value_for_key)
    except KeyError:
        await message.answer('<b>–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é üòê</b>',
                             parse_mode='HTML')


async def start_user_classif_again(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞, –ø–µ—Ä–µ—Ç–∞—Å–æ–≤—É–µ—Ç, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ –±–∞–∑–µ - –≤—ã–≤–æ–¥–∏—Ç –æ—à–∏–±–∫—É"""
    try:
        data = await state.get_data()
        await state.update_data(user_classif=randomize_keys(data['user_classif']))
        await start_classifications(message)
        await state.set_state(Users_steps.user_count)
        await state.update_data(user_count=0)
    except KeyError:
        await message.answer('<b>–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é üòê</b>',
                             parse_mode='HTML')


async def callback_inline(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É'"""
    try:
        data = await state.get_data()
        if len(show_value_from_dict(data['user_classif'], call.message.text)) > 200:
            await call.message.answer(show_value_from_dict(data['user_classif'], call.message.text),
                                    show_alert=True)
            await call.answer('–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç—ã –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º.\n–°–∫–∏–Ω—É–ª –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∏–∂–µ.')
        else:
            await call.answer(show_value_from_dict(data['user_classif'], call.message.text),
                                    show_alert=True)
    except KeyError:
        await call.message.answer('<b>–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é üòê</b>',
                             parse_mode='HTML')
        await call.answer()


# *******************************************************************************************************************
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ—á–∫–∞–º–∏
# *******************************************************************************************************************

async def show_keyboard_for_favourites(message: Message,state: FSMContext):
    """–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    await state.update_data(user_saved_text=get_user_favourites_in_bd(message.from_user.id))
    await state.set_state(Users_steps.user_count_for_saved_text)
    await state.update_data(user_count_for_saved_text=0)
    await work_from_favourites(message, state)


async def work_from_favourites(message: Message,state: FSMContext):
    """–í—ã–¥–∞–µ—Ç —Å—Ç—Ä–æ—á–∫–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    try:
        data = await state.get_data()
        if data['user_saved_text'] is not None:
            await message.answer('<b>–í–æ—Ç –≤–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:</b>',
                                 parse_mode='HTML',
                                 reply_markup=reply_keyboard_actions_for_favourites)
            await message.answer('üëÅ - –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞;\n‚ùå - —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ')
            await message.answer(show_key_from_dict(data['user_saved_text'], data['user_count_for_saved_text']),
                                                    reply_markup=show_value_for_key_in_favourites)
        else:
            await message.answer('–¢—É—Ç –ø—É—Å—Ç–æ ü§∑‚Äç‚ôÇÔ∏è')
    except KeyError:
        await message.answer('–¢—É—Ç –ø—É—Å—Ç–æ ü§∑‚Äç‚ôÇÔ∏è')


async def give_value_from_favourites(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'"""
    try:
        data = await state.get_data()
        if data['user_saved_text'] != None:
            if len(show_value_from_dict(data['user_saved_text'], call.message.text)) > 200:
                await call.message.answer(show_value_from_dict(data['user_saved_text'], call.message.text))
                await call.answer('–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç—ã –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º.\n–°–∫–∏–Ω—É–ª –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∏–∂–µ.')
            else:
                await call.answer(show_value_from_dict(data['user_saved_text'], call.message.text),
                                        show_alert=True)
        else: 
            await call.answer('–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ üòê')
    except KeyError:
        await call.answer('–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ üòê')



async def give_next_key_from_favourites(message: Message, state: FSMContext):
    """
    –í—ã–≤–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è. 
    """
    try:
        data = await state.get_data()
        await state.update_data(user_count_for_saved_text=couner_add(data['user_count_for_saved_text']))
        data = await state.get_data()
        if show_key_from_dict(data['user_saved_text'], data['user_count_for_saved_text']) is False:
            await message.answer('<b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏! ‚úÖ</b>',
                                 parse_mode='HTML')
        else:
            await message.answer(show_key_from_dict(data['user_saved_text'], data['user_count_for_saved_text']),
                                                    reply_markup=show_value_for_key_in_favourites)
    except KeyError:
        await message.answer('<b>–ê —á—Ç–æ –≤–∞–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, –µ—Å–ª–∏ —Ç—É—Ç –ø—É—Å—Ç–æ?</b>',
                             parse_mode='HTML')


async def start_favourites_again(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞, –ø–µ—Ä–µ—Ç–∞—Å–æ–≤—É–µ—Ç, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ –±–∞–∑–µ - –≤—ã–≤–æ–¥–∏—Ç –æ—à–∏–±–∫—É"""
    try:
        await state.update_data(user_saved_text=get_user_favourites_in_bd(message.from_user.id))
        if get_user_favourites_in_bd(message.from_user.id) is not None:
            await state.set_state(Users_steps.user_count_for_saved_text)
            await state.update_data(user_count_for_saved_text=0)
            data = await state.get_data()
            await state.update_data(user_saved_text=randomize_keys(data['user_saved_text']))
            await work_from_favourites(message, state)
        else:
            await message.answer('<b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏! ‚úÖ</b>',
                                 parse_mode='HTML',
                                 reply_markup=reply_keyboards)
    except KeyError:
        await message.answer('<b>–¢–æ–≥–¥–∞ –≤–∞–º —Å—Ç–æ–∏—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–æ–±–±–∏ –∏ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º.</b>',
                             parse_mode='HTML')


# async def return_in_user_classif(message: Message, state: FSMContext):
#     """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å—Ç–≤–∫–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—è(–Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫)"""
#     await message.answer('<b>–°–¥–µ–ª–∞–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞—é –≤–∞—à—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é</b>',
#                          parse_mode='HTML',
#                          reply_markup=reply_keyboard_actions)
#     await give_key_from_classif(message, state)


async def delete_line_from_favourites(call: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ –±–¥(favourites), –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É"""
    try:
        key = f' {call.message.text}'
        delete_line_from_bd(call.from_user.id, key)
        await call.answer(f'–£–¥–∞–ª–∏–ª: {key} ‚úÖ')
    except KeyError:
        await call.answer('–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ üòê')


async def delete_all_from_favorites(message: Message):
    """–û—á–∏—â–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–∑ –±–¥"""
    await message.answer('<b>–¢–µ–ø–µ—Ä—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç üëç</b>',
                         parse_mode='HTML',
                         reply_markup=reply_keyboards)
    delete_all_user_line_from_bd(message.from_user.id)


async def save_line_from_dict(call: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É –±–¥(favourites) –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ"""
    try:
        data = await state.get_data()
        key = f' {call.message.text}'
        value = show_value_from_dict(data['user_classif'], call.message.text)
        save_line_for_user_favourites(call.from_user.id, key, value)
        await call.answer(f'–î–æ–±–∞–≤–ª–µ–Ω–æ: {key} ‚úÖ')
    except KeyError:
        await call.answer('–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ(–Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ)')